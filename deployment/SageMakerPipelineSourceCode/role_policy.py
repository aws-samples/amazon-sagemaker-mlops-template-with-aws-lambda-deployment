from aws_cdk import aws_iam as _iam

role_policy = [
    _iam.PolicyStatement(
        actions=[
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetPartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:GetDatabase",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:SearchTables",
            "glue:UpdatePartition",
            "glue:UpdateTable",
        ],
        resources=[
            "arn:aws:glue:*:*:catalog",
            "arn:aws:glue:*:*:database/*",
            "arn:aws:glue:*:*:table/*",
            "arn:aws:glue:*:*:tableVersion/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "iam:PassRole",
        ],
        resources=[
            "arn:aws:iam::*:role/SageMakerMLOpsProductUseRole*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ec2:DescribeRouteTables",
        ],
        resources=[
            "*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "states:ListStateMachines",
        ],
        resources=[
            "*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "codestar-connections:UseConnection",
        ],
        resources=[
            "arn:aws:codestar-connections:*:*:connection/*",
        ],
        conditions={
            "StringEqualsIgnoreCase": {
                "aws:ResourceTag/sagemaker": "true"
            }
        }
    ),
    _iam.PolicyStatement(
        actions=[
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
        ],
        resources=[
            "arn:aws:events:*:*:rule/sagemaker-*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "states:DescribeExecution",
            "states:DescribeStateMachine",
            "states:DescribeStateMachineForExecution",
            "states:GetExecutionHistory",
            "states:ListExecutions",
            "states:ListTagsForResource",
            "states:StartExecution",
            "states:StopExecution",
            "states:TagResource",
            "states:UntagResource",
            "states:UpdateStateMachine",
        ],
        resources=[
            "arn:aws:states:*:*:stateMachine:sagemaker-*",
            "arn:aws:states:*:*:execution:sagemaker-*:*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:Describe*",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery",
        ],
        resources=[
            "*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "cloudwatch:PutMetricData",
        ],
        resources=[
            "*"
    ]),
    _iam.PolicyStatement(
        actions=[
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors",
            "s3:PutObjectAcl",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject",
            "s3:PutBucketAcl",
            "s3:GetEncryptionConfiguration",
            "s3:PutEncryptionConfiguration",
            "s3:GetBucketVersioning",
            "s3:PutBucketVersioning",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketPublicAccessBlock",
            "s3:PutAccountPublicAccessBlock",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketPolicy",
            "s3:GetBucketPolicy",
        ],
        resources=[
            "arn:aws:s3:::aws-glue-*",
            "arn:aws:s3:::sagemaker-*",
            "arn:aws:s3:::amazon-sagemaker-*",
            "arn:aws:s3:::cdk-*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "cloudformation:DescribeStackEvents",
            "cloudformation:GetTemplate",
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:SetStackPolicy",
            "cloudformation:UpdateStack",
        ],
        resources=[
            "arn:aws:cloudformation:*:*:stack/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:CancelUploadArchive",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:UploadArchive",
        ],
        resources=[
            "arn:aws:codecommit:*:*:sagemaker-*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "codepipeline:StartPipelineExecution",
        ],
        resources=[
            "arn:aws:codepipeline:*:*:sagemaker-*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild",
        ],
        resources=[
            "arn:aws:codebuild:*:*:project/sagemaker-*",
            "arn:aws:codebuild:*:*:build/sagemaker-*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:CreateRole",
            "iam:DetachRolePolicy",
            "iam:AttachRolePolicy",
            "iam:DeleteRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:PassRole",
            "iam:CreatePolicy",
        ],
        resources=[
            "arn:aws:iam::*:role/*",
            "arn:aws:iam::*:policy/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ssm:PutParameter",
            "ssm:GetParameter",
            "ssm:DeleteParameter",
            "ssm:GetParameters",
            "ssm:DeleteParameters",
        ],
        resources=[
            "arn:aws:ssm:*:*:parameter/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ecr:DeleteRepository",
            "ecr:CompleteLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:InitiateLayerUpload",
            "ecr:BatchCheckLayerAvailability",
            "ecr:PutImage",
        ],
        resources=[
            "arn:aws:ecr:*:*:repository/sagemaker-*",
            "arn:aws:ecr:*:*:repository/cdk-*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ecr:BatchGetImage",
            "ecr:Describe*",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetAuthorizationToken",
        ],
        resources=[
            "*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "lambda:CreateFunction",
            "lambda:InvokeFunction",
            "lambda:UpdateFunctionCode",
        ],
        resources=[
            "arn:aws:lambda:*:*:function:*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "athena:StartQueryExecution",
            "athena:GetQueryExecution"
        ],
        resources=[
            "arn:aws:athena:*:*:workgroup/*"
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "sagemaker:*",
        ],
        not_resources=[
            "arn:aws:sagemaker:*:*:domain/*",
            "arn:aws:sagemaker:*:*:user-profile/*",
            "arn:aws:sagemaker:*:*:app/*",
            "arn:aws:sagemaker:*:*:flow-definition/*",
        ],
    ),
]
