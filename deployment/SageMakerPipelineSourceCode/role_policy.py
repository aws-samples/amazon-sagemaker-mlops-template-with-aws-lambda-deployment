from aws_cdk import aws_iam as _iam

role_policy_ecr_image_build = [
    _iam.PolicyStatement(
        actions=[
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:CreateRole",
            "iam:DetachRolePolicy",
            "iam:AttachRolePolicy",
            "iam:DeleteRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:PassRole",
            "iam:CreatePolicy",
        ],
        resources=[
            "arn:aws:iam::*:role/*",
            "arn:aws:iam::*:policy/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ecr:DeleteRepository",
            "ecr:CompleteLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:InitiateLayerUpload",
            "ecr:BatchCheckLayerAvailability",
            "ecr:PutImage",

        ],
        resources=[
            "arn:aws:ecr:*:*:repository/sagemaker-*",
            "arn:aws:ecr:*:*:repository/cdk-*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ecr:BatchGetImage",
            "ecr:Describe*",
            "ecr:GetDownloadUrlForLayer",
        ],
        resources=[
            "arn:aws:ecr:*:*:repository/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ecr:GetAuthorizationToken",
        ],
        resources=[
            "*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "sagemaker:CreateImageVersion",
        ],
        resources=[
            "arn:aws:sagemaker:*:*:image/sagemaker-*-imagebuild",
        ],
    ),
]

role_policy_model_build = [
    _iam.PolicyStatement(
        actions=[
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:CreateRole",
            "iam:DetachRolePolicy",
            "iam:AttachRolePolicy",
            "iam:DeleteRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:PassRole",
            "iam:CreatePolicy",
        ],
        resources=[
            "arn:aws:iam::*:role/*",
            "arn:aws:iam::*:policy/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "sagemaker:DescribeImageVersion",
        ],
        resources=[
            "arn:aws:sagemaker:*:*:image-version/sagemaker-*-imagebuild/*",
        ],
    ),
]


role_policy_model_deploy = [
    _iam.PolicyStatement(
        actions=[
            "cloudformation:DescribeStackEvents",
            "cloudformation:GetTemplate",
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:SetStackPolicy",
            "cloudformation:UpdateStack",
        ],
        resources=[
            "arn:aws:cloudformation:*:*:stack/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:CreateRole",
            "iam:DetachRolePolicy",
            "iam:AttachRolePolicy",
            "iam:DeleteRole",
            "iam:PutRolePolicy",
            "iam:DeleteRolePolicy",
            "iam:PassRole",
            "iam:CreatePolicy",
        ],
        resources=[
            "arn:aws:iam::*:role/*",
            "arn:aws:iam::*:policy/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "lambda:CreateFunction",
            "lambda:InvokeFunction",
            "lambda:UpdateFunctionCode",
        ],
        resources=[
            "arn:aws:lambda:*:*:function:*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ssm:PutParameter",
            "ssm:GetParameter",
            "ssm:DeleteParameter",
            "ssm:GetParameters",
            "ssm:DeleteParameters",
        ],
        resources=[
            "arn:aws:ssm:*:*:parameter/*",
        ],
    ),
    _iam.PolicyStatement(
        actions=[
            "ecr:DeleteRepository",
            "ecr:CompleteLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:InitiateLayerUpload",
            "ecr:BatchCheckLayerAvailability",
            "ecr:PutImage",
        ],
        resources=[
            "arn:aws:ecr:*:*:repository/sagemaker-*",
            "arn:aws:ecr:*:*:repository/cdk-*",
        ],
    ), 
    _iam.PolicyStatement(
        actions=[
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors",
            "s3:PutObjectAcl",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject",
            "s3:PutBucketAcl",
            "s3:GetEncryptionConfiguration",
            "s3:PutEncryptionConfiguration",
            "s3:GetBucketVersioning",
            "s3:PutBucketVersioning",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketPublicAccessBlock",
            "s3:PutAccountPublicAccessBlock",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketPolicy",
            "s3:GetBucketPolicy",
        ],
        resources=[
            "arn:aws:s3:::aws-glue-*",
            "arn:aws:s3:::sagemaker-*",
            "arn:aws:s3:::amazon-sagemaker-*",
            "arn:aws:s3:::cdk-*",
        ],
    ),
]
